// scripts/deploy.js

async function main() {
  // Get the list of available accounts (using ethers.js which is bundled with Hardhat)
  const [deployer] = await ethers.getSigners();
  console.log("Deploying contracts with the account:", deployer.address);

  // Get the contract factory for your RecoveryWallet contract
  const RecoveryWallet = await ethers.getContractFactory("RecoveryWallet");

  // Define the initial parameters:
  // - owner: using the deployer's address (or change as needed)
  // - guardians: replace with valid Ethereum addresses
  // - recoveryThreshold: the number of votes required for recovery (e.g., 2)
  const owner = deployer.address;
  const guardians = [
    "0x1234567890123456789012345678901234567890",
    "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd",
    "0x9876543210987654321098765432109876543210"
  ];
  const recoveryThreshold = 2;

  // Deploy the contract with the specified constructor arguments
  const wallet = await RecoveryWallet.deploy(owner, guardians, recoveryThreshold);
  await wallet.deployed();

  console.log("RecoveryWallet deployed to:", wallet.address);
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

